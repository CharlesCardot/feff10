#!/usr/bin/env python

import sys
from math import sqrt
from xml.dom import minidom

# Define conversion from Ang to au
ang2au = 1.0/0.52917706

# Define dictionaries for the periodic table
AN2Sym = {
   1:'H' ,   2:'He',   3:'Li',   4:'Be',   5:'B' ,   6:'C' ,   7:'N' ,   8:'O' ,
   9:'F' ,  10:'Ne',  11:'Na',  12:'Mg',  13:'Al',  14:'Si',  15:'P' ,  16:'S' ,
  17:'Cl',  18:'Ar',  19:'K' ,  20:'Ca',  21:'Sc',  22:'Ti',  23:'V' ,  24:'Cr',
  25:'Mn',  26:'Fe',  27:'Co',  28:'Ni',  29:'Cu',  30:'Zn',  31:'Ga',  32:'Ge',
  33:'As',  34:'Se',  35:'Br',  36:'Kr',  37:'Rb',  38:'Sr',  39:'Y' ,  40:'Zr',
  41:'Nb',  42:'Mo',  43:'Tc',  44:'Ru',  45:'Rh',  46:'Pd',  47:'Ag',  48:'Cd',
  49:'In',  50:'Sn',  51:'Sb',  52:'Te',  53:'I' ,  54:'Xe',  55:'Cs',  56:'Ba',
  57:'La',  58:'Ce',  59:'Pr',  60:'Nd',  61:'Pm',  62:'Sm',  63:'Eu',  64:'Gd',
  65:'Tb',  66:'Dy',  67:'Ho',  68:'Er',  69:'Tm',  70:'Yb',  71:'Lu',  72:'Hf',
  73:'Ta',  74:'W' ,  75:'Re',  76:'Os',  77:'Ir',  78:'Pt',  79:'Au',  80:'Hg',
  81:'Tl',  82:'Pb',  83:'Bi',  84:'Po',  85:'At',  86:'Rn',  87:'Fr',  88:'Ra',
  89:'Ac',  90:'Th',  91:'Pa',  92:'U' ,  93:'Np',  94:'Pu',  95:'Am',  96:'Cm',
  97:'Bk',  98:'Cf',  99:'Es', 100:'Fm', 101:'Md', 102:'No', 103:'Lr'
}

Sym2AN = {
'H' :  1, 'He':  2, 'Li':  3, 'Be':  4, 'B' :  5, 'C' :  6, 'N' :  7, 'O' :  8,
'F' :  9, 'Ne': 10, 'Na': 11, 'Mg': 12, 'Al': 13, 'Si': 14, 'P' : 15, 'S' : 16,
'Cl': 17, 'Ar': 18, 'K' : 19, 'Ca': 20, 'Sc': 21, 'Ti': 22, 'V' : 23, 'Cr': 24,
'Mn': 25, 'Fe': 26, 'Co': 27, 'Ni': 28, 'Cu': 29, 'Zn': 30, 'Ga': 31, 'Ge': 32,
'As': 33, 'Se': 34, 'Br': 35, 'Kr': 36, 'Rb': 37, 'Sr': 38, 'Y' : 39, 'Zr': 40,
'Nb': 41, 'Mo': 42, 'Tc': 43, 'Ru': 44, 'Rh': 45, 'Pd': 46, 'Ag': 47, 'Cd': 48,
'In': 49, 'Sn': 50, 'Sb': 51, 'Te': 52, 'I' : 53, 'Xe': 54, 'Cs': 55, 'Ba': 56,
'La': 57, 'Ce': 58, 'Pr': 59, 'Nd': 60, 'Pm': 61, 'Sm': 62, 'Eu': 63, 'Gd': 64,
'Tb': 65, 'Dy': 66, 'Ho': 67, 'Er': 68, 'Tm': 69, 'Yb': 70, 'Lu': 71, 'Hf': 72,
'Ta': 73, 'W' : 74, 'Re': 75, 'Os': 76, 'Ir': 77, 'Pt': 78, 'Au': 79, 'Hg': 80,
'Tl': 81, 'Pb': 82, 'Bi': 83, 'Po': 84, 'At': 85, 'Rn': 86, 'Fr': 87, 'Ra': 88,
'Ac': 89, 'Th': 90, 'Pa': 91, 'U' : 92, 'Np': 93, 'Pu': 94, 'Am': 95, 'Cm': 96,
'Bk': 97, 'Cf': 98, 'Es': 99, 'Fm':100, 'Md':101, 'No':102, 'Lr':103,
}
# Get the name of the vasp xml file to process
vasp_xml = sys.argv[1]

# Debug
#print vasp_xml

# Here we should check that the file exist and is an xml

# Parse the xml output and get the exec_host data
xmldoc = minidom.parse(vasp_xml)

# Debug
#print xmldoc

# Debug: Trying to get the IBRION card
incarinfolist = xmldoc.getElementsByTagName('incar')

# Make sure it is there
if incarinfolist.length < 1:
  sys.stderr.write('No INCAR info in xml\n')
  sys.exit()

# Print warning if it isn't unique
if incarinfolist.length > 1:
  sys.stderr.write('Warning: incarinfo not unique, using first instance\n')

incarinfo = incarinfolist[0]

# Debug
#print incarinfo.toxml()

for info in incarinfo.getElementsByTagName('i'):
  if info.hasAttribute('name') & (info.getAttribute('name') == 'IBRION'):
    break

IBRION = int(info.firstChild.data)

# Debug
#print IBRION

# Get the atomic info
atominfolist = xmldoc.getElementsByTagName('atominfo')

# Make sure it is there
if atominfolist.length < 1:
  sys.stderr.write('No atoms info in xml\n')
  sys.exit()

# Print warning if it isn't unique
if atominfolist.length > 1:
  sys.stderr.write('Warning: atominfo not unique, using first instance\n')

atominfo = atominfolist[0]

# Debug
#print atominfo.toxml()

# Now we parse the atomic info to get the important stuff

# Get the number of atoms
atomslist = atominfo.getElementsByTagName('atoms')

# Make sure it is there
if atomslist.length < 1:
  sys.stderr.write('No atoms in atoms info\n')
  sys.exit()

# Print warning if it isn't unique
if atomslist.length > 1:
  sys.stderr.write('Warning: atoms in atoms list not unique, using first instance\n')

nAt_Tot = int(atomslist[0].firstChild.data)

# Debug
#print nAt_Tot

# Get the number of atom types
typeslist = atominfo.getElementsByTagName('types')

# Make sure it is there
if typeslist.length < 1:
  sys.stderr.write('No types in atoms info\n')
  sys.exit()

# Print warning if it isn't unique
if typeslist.length > 1:
  sys.stderr.write('Warning: types in atoms list not unique, using first instance\n')

nTyp = int(typeslist[0].firstChild.data)

# Debug
#print nTyp

# Now we get the information from each of the arrays in atomicinfo
for array in atominfo.getElementsByTagName('array'):
  if   array.getAttribute('name') == 'atoms':
# Get a list of the atoms in the cell, and their types
# Debug
#   print 'atoms proc'
    At_Sym = []
    At_Typ = []
    for arrayelem in array.getElementsByTagName('rc'):
      atomelemlist = arrayelem.getElementsByTagName('c')
      At_Sym.append(str(atomelemlist[0].firstChild.data))
      At_Typ.append(int(atomelemlist[1].firstChild.data))
  elif array.getAttribute('name') == 'atomtypes':
# Get the atomic information for each type of atom.
# This part is a bit hacky since to simplify I need to assume that the
# order of the info won't change. This is probably good enough for now.
# Debug
#   print 'atomtypes proc'
    typeelemlist = array.getElementsByTagName('rc')
    if typeelemlist.length > nTyp:
      sys.stderr.write('Inconsistent number of types\n')
      sys.exit()
# Initialize empty dictionaries for the info we will be gathering for each type
    Typ_nAt    = {}
    Typ_Sym    = {}
    Typ_Mass   = {}
    Typ_nValEl = {}
# Type counter
    iTyp = 1
    for typeelem in typeelemlist:
      typeinfolist = typeelem.getElementsByTagName('c')
      if typeinfolist.length != 5:
        sys.stderr.write('Expecting 5 elements in type set\n')
        sys.exit()
      Typ_nAt.update({iTyp:int(typeinfolist[0].firstChild.data)})
      Typ_Sym.update({iTyp:str(typeinfolist[1].firstChild.data)})
      Typ_Mass.update({iTyp:float(typeinfolist[2].firstChild.data)})
      Typ_nValEl.update({iTyp:float(typeinfolist[3].firstChild.data)})
      iTyp = iTyp + 1
  else:
    sys.stderr.write('array in atominfo has unknown name\n')
    sys.exit()

# Convert the atomic symbols into atomic numbers
At_AN = [ Sym2AN[sym.strip()] for sym in At_Sym ]

# Debug
#print At_Sym
#print At_Typ
#print At_AN

#exit()

# Debug
#print Typ_nAt
#print Typ_Sym
#print Typ_Mass
#print Typ_nValEl

#exit()

# Here we should do some sanity checks of the data we read

# Find the structure
# NOTE: Using the initial position coordinates since the other coordiantes
#       in the xml file are distorted by the calculation
#       of the finite differences

for struc in xmldoc.getElementsByTagName('structure'):
  if struc.hasAttribute('name') & (struc.getAttribute('name') == 'initialpos'):
    break

# Collect the unit cell info from the initial positions
for array in struc.getElementsByTagName('varray'):
  if array.hasAttribute('name') & (array.getAttribute('name') == 'basis'):
    break

Cell_Vec = []
for vec in array.getElementsByTagName('v'):
  Cell_Vec.append([float(str) for str in vec.firstChild.data.split()])

# Debug
#print Cell_Vec

# Collect the atomic coordinates from the initial positions
for array in struc.getElementsByTagName('varray'):
  if array.hasAttribute('name') & (array.getAttribute('name') == 'positions'):
    break
#print array.childNodes

At_Red = []
for vec in array.getElementsByTagName('v'):
  At_Red.append([float(str) for str in vec.firstChild.data.split()])

# Debug
#print At_Red

# Collect the optimization/dynamical matrix flags
for array in struc.getElementsByTagName('varray'):
  if array.hasAttribute('name') & (array.getAttribute('name') == 'selective'):
    break

At_Coord_Flags = []
for vec in array.getElementsByTagName('v'):
  At_Coord_Flags.append([ (str=='T') for str in vec.firstChild.data.split()])

# Debug
#print At_Flag_F

# Here we generate the flags to control if the atom is active or not. We also
# make sure that:
#  1) If IBRION = 6, then we should have optimization flags for all atoms. If
#     this is not the case, then we print a warning.
#  2) If IBRION = 5, we count the atoms that have optimization flags and make
#     sure that all the coordinates are free ("T T T"). Otherwise we fail.
if IBRION == 6:
  if not(all([ all(row) for row in At_Coord_Flags ])):
    sys.stderr.write('Warning: IBRION = 6 but frozen coordinates found\n')
    sys.stderr.write('         Make sure this is what your really want\n')
  At_Flags = [True]*nAt_Tot
  nAt_Use = nAt_Tot

if IBRION == 5:
  if not(all([ (sum(row)==0) or (sum(row)==3) for row in At_Coord_Flags ])):
    sys.stderr.write('Error: IBRION = 5 has partially frozen atoms\n')
    sys.stderr.write('       Probably this is not what you want\n')
    sys.exit()
  At_Flags = [ (sum(row)==3) for row in At_Coord_Flags ]
  nAt_Use = sum(At_Flags)

# Convert to cartesian coordinates
At_XYZ = []
for At in At_Red:
  XYZ = [ 0, 0, 0 ]
  for iCoor in range(0,3):
    for jCoor in range(0,3):
      XYZ[jCoor] = XYZ[jCoor] + ang2au*At[iCoor]*Cell_Vec[iCoor][jCoor]
  At_XYZ.append(XYZ)

# Debug
#print At_XYZ
#exit()

# Here we should do some sanity checks of the data we read

# Find the Hessian
dynmatlist = xmldoc.getElementsByTagName('dynmat')

if dynmatlist.length < 1:
  sys.stderr.write('No dynmat data found\n')
  sys.exit()
if dynmatlist.length > 1:
  sys.stderr.write('Warning: found more than one dynmat, will use first one\n')

for array in dynmatlist[0].getElementsByTagName('varray'):
  if array.hasAttribute('name') & (array.getAttribute('name') == 'hessian'):
    break

Buffer = []
for vec in array.getElementsByTagName('v'):
  Buffer.append([float(str) for str in vec.firstChild.data.split()])

# Debug
#print len(Buffer[0])
#print Buffer[1]
#print (Buffer[29][29:107])
#for vec in Buffer:
#  for elem in vec:
#    print '{:14.8f}'.format(elem)
#sys.exit()

# Convert the buffer into the blocked format we use in the output
# NOTE: This is very ugly, but will have to do for now until I learn more
Dyn_Mat = [[[] for i in range(0,nAt_Use)] for i in range(0,nAt_Use)]
iAt_Use = 0
for iAt in [ x for (x,y) in zip(range(0,nAt_Tot),At_Flags) if y ]:
  jAt_Use = 0
  for jAt in [ x for (x,y) in zip(range(0,nAt_Tot),At_Flags) if y ]:
    Block = []
    for iCoor in range(0,3):
      Row = Buffer[3*iAt_Use+iCoor][3*jAt_Use:3*jAt_Use+3]
      Fac = -sqrt(Typ_Mass[At_Typ[iAt]]*Typ_Mass[At_Typ[jAt]])*0.0102908487617
      Block.append([Fac*fc for fc in Row])
    Dyn_Mat[iAt_Use][jAt_Use] = Block
    jAt_Use += 1
  iAt_Use += 1

# Debug
#print Buffer[0][0:3]

# Debug
#print len(Dyn_Mat[0][0])
#exit()

# Here we should do some sanity checks of the data we read

# Now we have all the data we need, we print it out in the right format

# In the future we will get options as to what format of dym to print. For
# now we hardwire it here and print accordingly
Dym_Type = 4

# dym format label
print '{:4d}'.format(Dym_Type)

# Used number of atoms
print '{:4d}'.format(nAt_Use)

# Atomic numbers
for AN in [ x for (x,y) in zip(At_AN,At_Flags) if y ]:
  print '{:4d}'.format(AN)

# Atomic masses
for At in [ x for (x,y) in zip(At_Typ,At_Flags) if y ]:
  print '{:14.7f}'.format(Typ_Mass[At])

if   Dym_Type == 1:

# Cartesian coordinates, in au
  for At in [ x for (x,y) in zip(At_XYZ,At_Flags) if y ]:
    print '{:14.8f}{:14.8f}{:14.8f}'.format(*At)

elif Dym_Type == 4:

# Reduced coordinates
  for At in [ x for (x,y) in zip(At_Red,At_Flags) if y ]:
    print '{:11.8f}{:11.8f}{:11.8f}'.format(*At)

# Debug
#print Dyn_Mat[0][0][0][0]*Typ_Mass[At_Typ[0]]*0.0102908487617
#print Dyn_Mat[0][0][0][0]
#exit()

# Print the dynamical matrix blocks
for iAt in range(0,nAt_Use):
  for jAt in range(0,nAt_Use):
    print ' {:4d} {:4d}'.format(iAt+1,jAt+1)
    for Row in Dyn_Mat[iAt][jAt]:
      print ' {:13.6e} {:13.6e} {:13.6e}'.format(*Row)

# Print the cell vectors if this dym file type includes them
if   Dym_Type == 4:

# Print a separator line
  print ''

  for Vec in Cell_Vec:
    print '{:14.8f}{:14.8f}{:14.8f}'.format(*[ang2au*x for x in Vec])


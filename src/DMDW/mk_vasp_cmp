#!/usr/bin/env python

import sys
import os.path
import shutil

# Define the names of the files we will use, to make it a bit more generic
Files_Inc = { 'INCAR'    : 'INCAR'}

Files_Unm = { 'KPOINTS'  : 'KPOINTS',
              'POTCAR'   : 'POTCAR'}

Files_Pos = { 'POSCAR'   : 'POSCAR'}

Files_Que = { 'queuescr' : 'vasp_hopper.pbs'}

Files = dict(Files_Inc.items() + 
             Files_Unm.items() + 
             Files_Pos.items() + 
             Files_Que.items())

# Make sure we have all the files we need
for File in Files:
  if not(os.path.isfile(Files[File])):
    sys.stderr.write('File not found: ' + Files[File] +'\n')
    sys.exit()

# NOTE: Here I should use pyparsing to get this information, but it will
#       take me too long to learn. Will do a hack for now

# Check in INCAR to see if IBRION = 5
for lineraw in open(Files['INCAR'],'r'):
# Remove front and trailing blanks and newline
  line = lineraw.rstrip().lstrip()
# Ignore the line if it is empty or starts with a hash (comment)
  if len(line) == 0 or line[0] == '#':
    continue
# Eliminate any inline comments
  try:
    comm_pos = line.index('!')
    line = line[0:comm_pos]
  except:
    pass
  try:
    comm_pos = line.index('#')
    line = line[0:comm_pos]
  except:
    pass
# Check if we have the required '='
  try:
    eq_pos = line.index('=')
  except:
    sys.stderr.write('There seems to be a syntax error in INCAR line:\n')
    sys.stderr.write(lineraw)
    sys.exit()
  Tag   = line[0:eq_pos].rstrip().lstrip().upper()
  Value = line[eq_pos+1:].rstrip().lstrip()
  if Tag == 'IBRION':
    IBRION = int(Value)
    break
else:
  sys.stderr.write('Error: IBRION not found in INCAR file\n')
  sys.exit()

if not(IBRION==5):
  sys.stderr.write('Error: IBRION must be = 5 (for now)\n')
  sys.exit()

# Read the POSCAR file
POSCAR = [ line.rstrip() for line in open(Files['POSCAR'],'r') ]

# Do some sanity checks to make sure it has the right format
# 1) Check that line 7 has numbers
try:
  nAt_Typ = [ int(nAt) for nAt in POSCAR[6].split() ]
except:
  sys.stderr.write('Error: Wrong format in line 7 of '+Files['POSCAR']+':\n')
  sys.stderr.write(POSCAR[6]+'\n')
  sys.exit()

# 2) Check that line 8 has "selective dynamics"
if not(POSCAR[7].rstrip().lstrip().lower()=='selective dynamics'):
  sys.stderr.write('Error: Line 8 of '+Files['POSCAR']+' should be ')
  sys.stderr.write('\'Selective dynamics\', we found:\n')
  sys.stderr.write(POSCAR[7]+'\n')
  sys.exit()

# 3) Check that line 9 has "direct"
if not(POSCAR[8].rstrip().lstrip().lower()=='direct'):
  sys.stderr.write('Error: Line 9 of '+Files['POSCAR']+' should be ')
  sys.stderr.write('\'Direct\', we found:\n')
  sys.stderr.write(POSCAR[8]+'\n')
  sys.exit()

# Calculate the total number of atoms
nAt_Tot = sum(nAt_Typ)

# Get the optimization flags from the POSCAR
Buffer = [ line.split()[3:] for line in POSCAR[9:9+nAt_Tot]]
At_Coord_Flags = [ [a in 'Tt',b in 'Tt',c in 'Tt'] for [a,b,c] in Buffer ]

# Make sure that if an atom is 'free', all its coordinates are
if not(all([ (sum(row)==0) or (sum(row)==3) for row in At_Coord_Flags ])):
  sys.stderr.write('Error: '+Files['POSCAR']+' has partially frozen atoms\n')
  sys.stderr.write('       Probably this is not what you want\n')
  sys.exit()
At_Flags = [ (sum(row)==3) for row in At_Coord_Flags ]
nAt_Use = sum(At_Flags)

# Get the number of block we want to use to partition the calculation
nBlk = int(sys.argv[1])

# Make sure that it isn't crazy. The 100 limit is a bit out of a hat for now.
if nBlk > 100:
  sys.stderr.write('Error: use 100 or less partition blocks\n')
  sys.exit()

if nBlk > nAt_Use:
  sys.stderr.write('Error: More blocks than free atoms.\n')
  sys.exit()

# Generate a well balanced partition
Blk_Size = nAt_Use/nBlk
nAt_Part = [ a+b for (a,b) in \
             zip([Blk_Size]*nBlk,[1]*(nAt_Use%nBlk) + [0]*(nBlk-nAt_Use%nBlk)) ]

# Debug
#print nAt_Use*3*2
#print max(nAt_Part)
#sys.exit()

# Generate the list of directory names
DirNameList = [ "Blk.{0:03d}".format(idir) for idir in range(0,nBlk+1) ]

# Make the different directories
for Dir in DirNameList:
  if os.path.exists(Dir):
    sys.stderr.write('Error: Block directories exist, will not overwrite\n')
    sys.exit()
  else:
    os.makedirs(Dir)

# Copy the unchanged files
for Dir in DirNameList:
  for File in Files_Unm:
   shutil.copyfile(Files[File],Dir+'/'+Files[File])
for Dir in DirNameList[1:]:
  for File in Files_Inc:
   shutil.copyfile(Files[File],Dir+'/'+Files[File])

# Copy special versions of INCAR and POSCAR into the first directory (Blk.000)
# This block store the single point run that will be used as an initial guess
# for all the other runs.
Tag_Eliminate = ['IBRION', 'NSW', 'NFREE', 'POTIM', 'SMASS']
INCAR_IG = open(DirNameList[0]+'/'+Files['INCAR'],'w')
for lineraw in open(Files['INCAR'],'r'):
  Flag = not any([ Tag in lineraw.upper() for Tag in Tag_Eliminate ])
  if Flag:
    INCAR_IG.write(lineraw)
INCAR_IG.close()

POSCAR_IG = open(DirNameList[0]+'/'+Files['POSCAR'],'w')
for iline in range(0,9):
  POSCAR_IG.write(POSCAR[iline]+'\n')
for iAt in range(0,nAt_Tot):
  Line = POSCAR[9+iAt].replace('T','F').replace('t','F')
  POSCAR_IG.write(Line+'\n')
POSCAR_IG.close()

# Generate the partitioned flags and print out the partitioned POSCAR files
Indices =  [ i for i in range(0,nAt_Tot) if At_Flags[i] ]
iAt_Part = 0
for (nAt,Dir) in zip(nAt_Part,DirNameList[1:]):
  POSCAR_Blk = open(Dir+'/'+Files['POSCAR'],'w')
  for iline in range(0,9):
    POSCAR_Blk.write(POSCAR[iline]+'\n')
  for iAt in range(0,nAt_Tot):
    Line = POSCAR[9+iAt].replace('T','F').replace('t','F')
    if iAt in Indices[iAt_Part:iAt_Part+nAt]:
      Line = Line.replace('F','T')
    POSCAR_Blk.write(Line+'\n')
  POSCAR_Blk.close()
  iAt_Part += nAt

# Generate the queueing scripts
# NOTE: Very simple scripts for now, rely a lot on manipulations from the user
#       before submitting.
JobName   = sys.argv[2].rstrip().lstrip()
QueueName = sys.argv[3].rstrip().lstrip()
NProc     = sys.argv[4].rstrip().lstrip()

for Dir in DirNameList:
  QUEUE_Scr = open(Dir+'/'+Files['queuescr'],'w')
  for Line in open(Files['queuescr'],'r'):
    Line = Line.replace('XXNAMEXX',JobName+'.'+Dir)
    Line = Line.replace('XXQUEUEXX',QueueName)
    Line = Line.replace('XXNPXX',NProc)
    Line = Line.replace('XXGUESSXX',str(int(Dir=='Blk.000')))
    QUEUE_Scr.write(Line)
  QUEUE_Scr.close()

sys.exit()

# Define conversion from Ang to au
ang2au = 1.0/0.52917706

# Define dictionaries for the periodic table
AN2Sym = {
   1:'H' ,   2:'He',   3:'Li',   4:'Be',   5:'B' ,   6:'C' ,   7:'N' ,   8:'O' ,
   9:'F' ,  10:'Ne',  11:'Na',  12:'Mg',  13:'Al',  14:'Si',  15:'P' ,  16:'S' ,
  17:'Cl',  18:'Ar',  19:'K' ,  20:'Ca',  21:'Sc',  22:'Ti',  23:'V' ,  24:'Cr',
  25:'Mn',  26:'Fe',  27:'Co',  28:'Ni',  29:'Cu',  30:'Zn',  31:'Ga',  32:'Ge',
  33:'As',  34:'Se',  35:'Br',  36:'Kr',  37:'Rb',  38:'Sr',  39:'Y' ,  40:'Zr',
  41:'Nb',  42:'Mo',  43:'Tc',  44:'Ru',  45:'Rh',  46:'Pd',  47:'Ag',  48:'Cd',
  49:'In',  50:'Sn',  51:'Sb',  52:'Te',  53:'I' ,  54:'Xe',  55:'Cs',  56:'Ba',
  57:'La',  58:'Ce',  59:'Pr',  60:'Nd',  61:'Pm',  62:'Sm',  63:'Eu',  64:'Gd',
  65:'Tb',  66:'Dy',  67:'Ho',  68:'Er',  69:'Tm',  70:'Yb',  71:'Lu',  72:'Hf',
  73:'Ta',  74:'W' ,  75:'Re',  76:'Os',  77:'Ir',  78:'Pt',  79:'Au',  80:'Hg',
  81:'Tl',  82:'Pb',  83:'Bi',  84:'Po',  85:'At',  86:'Rn',  87:'Fr',  88:'Ra',
  89:'Ac',  90:'Th',  91:'Pa',  92:'U' ,  93:'Np',  94:'Pu',  95:'Am',  96:'Cm',
  97:'Bk',  98:'Cf',  99:'Es', 100:'Fm', 101:'Md', 102:'No', 103:'Lr'
}

Sym2AN = {
'H' :  1, 'He':  2, 'Li':  3, 'Be':  4, 'B' :  5, 'C' :  6, 'N' :  7, 'O' :  8,
'F' :  9, 'Ne': 10, 'Na': 11, 'Mg': 12, 'Al': 13, 'Si': 14, 'P' : 15, 'S' : 16,
'Cl': 17, 'Ar': 18, 'K' : 19, 'Ca': 20, 'Sc': 21, 'Ti': 22, 'V' : 23, 'Cr': 24,
'Mn': 25, 'Fe': 26, 'Co': 27, 'Ni': 28, 'Cu': 29, 'Zn': 30, 'Ga': 31, 'Ge': 32,
'As': 33, 'Se': 34, 'Br': 35, 'Kr': 36, 'Rb': 37, 'Sr': 38, 'Y' : 39, 'Zr': 40,
'Nb': 41, 'Mo': 42, 'Tc': 43, 'Ru': 44, 'Rh': 45, 'Pd': 46, 'Ag': 47, 'Cd': 48,
'In': 49, 'Sn': 50, 'Sb': 51, 'Te': 52, 'I' : 53, 'Xe': 54, 'Cs': 55, 'Ba': 56,
'La': 57, 'Ce': 58, 'Pr': 59, 'Nd': 60, 'Pm': 61, 'Sm': 62, 'Eu': 63, 'Gd': 64,
'Tb': 65, 'Dy': 66, 'Ho': 67, 'Er': 68, 'Tm': 69, 'Yb': 70, 'Lu': 71, 'Hf': 72,
'Ta': 73, 'W' : 74, 'Re': 75, 'Os': 76, 'Ir': 77, 'Pt': 78, 'Au': 79, 'Hg': 80,
'Tl': 81, 'Pb': 82, 'Bi': 83, 'Po': 84, 'At': 85, 'Rn': 86, 'Fr': 87, 'Ra': 88,
'Ac': 89, 'Th': 90, 'Pa': 91, 'U' : 92, 'Np': 93, 'Pu': 94, 'Am': 95, 'Cm': 96,
'Bk': 97, 'Cf': 98, 'Es': 99, 'Fm':100, 'Md':101, 'No':102, 'Lr':103,
}
# Get the name of the vasp xml file to process
vasp_xml = sys.argv[1]

# Debug
#print vasp_xml

# Here we should check that the file exist and is an xml

# Parse the xml output and get the exec_host data
xmldoc = minidom.parse(vasp_xml)

# Debug
#print xmldoc

# Get the INCAR information
incarinfolist = xmldoc.getElementsByTagName('incar')

# Make sure it is there
if incarinfolist.length < 1:
  sys.stderr.write('No INCAR info in xml\n')
  sys.exit()

# Print warning if it isn't unique
if incarinfolist.length > 1:
  sys.stderr.write('Warning: incarinfo not unique, using first instance\n')

incarinfo = incarinfolist[0]

# Debug
#print incarinfo.toxml()

# Get the IBRION value
for info in incarinfo.getElementsByTagName('i'):
  if info.hasAttribute('name') & (info.getAttribute('name') == 'IBRION'):
    break
else:
  sys.stderr.write('Error: IBRION not found in INCAR\n')
  sys.exit()

IBRION = int(info.firstChild.data)

if not( IBRION in [5,6] ):
  sys.stderr.write('Error: IBRION must be 5 or 6\n')
  sys.exit()

# Debug
#print IBRION

# Get the value of the derivative step POTIM
for info in incarinfo.getElementsByTagName('i'):
  if info.hasAttribute('name') & (info.getAttribute('name') == 'POTIM'):
    break
else:
  sys.stderr.write('Error: POTIM not found in INCAR\n')
  sys.exit()

POTIM = float(info.firstChild.data)

# Debug
#print POTIM

# Get the value of the number of derivative steps NFREE
for info in incarinfo.getElementsByTagName('i'):
  if info.hasAttribute('name') & (info.getAttribute('name') == 'NFREE'):
    break
else:
  sys.stderr.write('Error: NFREE not found in INCAR\n')
  sys.exit()

NFREE = int(info.firstChild.data)

# For now we only handle simple centered difference (NFREE=2)
if NFREE != 2:
  sys.stderr.write('Error: NFREE must be 2 (for now)\n')
  sys.exit()

# Debug
#print NFREE

# Get the atomic info
atominfolist = xmldoc.getElementsByTagName('atominfo')

# Make sure it is there
if atominfolist.length < 1:
  sys.stderr.write('No atoms info in xml\n')
  sys.exit()

# Print warning if it isn't unique
if atominfolist.length > 1:
  sys.stderr.write('Warning: atominfo not unique, using first instance\n')

atominfo = atominfolist[0]

# Debug
#print atominfo.toxml()

# Now we parse the atomic info to get the important stuff

# Get the number of atoms
atomslist = atominfo.getElementsByTagName('atoms')

# Make sure it is there
if atomslist.length < 1:
  sys.stderr.write('No atoms in atoms info\n')
  sys.exit()

# Print warning if it isn't unique
if atomslist.length > 1:
  sys.stderr.write('Warning: atoms in atoms list not unique, using first instance\n')

nAt_Tot = int(atomslist[0].firstChild.data)

# Debug
#print nAt_Tot

# Get the number of atom types
typeslist = atominfo.getElementsByTagName('types')

# Make sure it is there
if typeslist.length < 1:
  sys.stderr.write('No types in atoms info\n')
  sys.exit()

# Print warning if it isn't unique
if typeslist.length > 1:
  sys.stderr.write('Warning: types in atoms list not unique, using first instance\n')

nTyp = int(typeslist[0].firstChild.data)

# Debug
#print nTyp

# Now we get the information from each of the arrays in atomicinfo
for array in atominfo.getElementsByTagName('array'):
  if   array.getAttribute('name') == 'atoms':
# Get a list of the atoms in the cell, and their types
# Debug
#   print 'atoms proc'
    At_Sym = []
    At_Typ = []
    for arrayelem in array.getElementsByTagName('rc'):
      atomelemlist = arrayelem.getElementsByTagName('c')
      At_Sym.append(str(atomelemlist[0].firstChild.data))
      At_Typ.append(int(atomelemlist[1].firstChild.data))
  elif array.getAttribute('name') == 'atomtypes':
# Get the atomic information for each type of atom.
# This part is a bit hacky since to simplify I need to assume that the
# order of the info won't change. This is probably good enough for now.
# Debug
#   print 'atomtypes proc'
    typeelemlist = array.getElementsByTagName('rc')
    if typeelemlist.length > nTyp:
      sys.stderr.write('Inconsistent number of types\n')
      sys.exit()
# Initialize empty dictionaries for the info we will be gathering for each type
    Typ_nAt    = {}
    Typ_Sym    = {}
    Typ_Mass   = {}
    Typ_nValEl = {}
# Type counter
    iTyp = 1
    for typeelem in typeelemlist:
      typeinfolist = typeelem.getElementsByTagName('c')
      if typeinfolist.length != 5:
        sys.stderr.write('Expecting 5 elements in type set\n')
        sys.exit()
      Typ_nAt.update({iTyp:int(typeinfolist[0].firstChild.data)})
      Typ_Sym.update({iTyp:str(typeinfolist[1].firstChild.data)})
      Typ_Mass.update({iTyp:float(typeinfolist[2].firstChild.data)})
      Typ_nValEl.update({iTyp:float(typeinfolist[3].firstChild.data)})
      iTyp = iTyp + 1
  else:
    sys.stderr.write('array in atominfo has unknown name\n')
    sys.exit()

# Convert the atomic symbols into atomic numbers
At_AN = [ Sym2AN[sym.strip()] for sym in At_Sym ]

# Debug
#print At_Sym
#print At_Typ
#print At_AN

#exit()

# Debug
#print Typ_nAt
#print Typ_Sym
#print Typ_Mass
#print Typ_nValEl

#exit()

# Here we should do some sanity checks of the data we read

# Find the structure
# NOTE: Using the initial position coordinates since the other coordiantes
#       in the xml file are distorted by the calculation
#       of the finite differences

for struc in xmldoc.getElementsByTagName('structure'):
  if struc.hasAttribute('name') & (struc.getAttribute('name') == 'initialpos'):
    break

# Collect the unit cell info from the initial positions
for array in struc.getElementsByTagName('varray'):
  if array.hasAttribute('name') & (array.getAttribute('name') == 'basis'):
    break

Cell_Vec = []
for vec in array.getElementsByTagName('v'):
  Cell_Vec.append([float(str) for str in vec.firstChild.data.split()])

# Debug
#print Cell_Vec

# Collect the atomic coordinates from the initial positions
for array in struc.getElementsByTagName('varray'):
  if array.hasAttribute('name') & (array.getAttribute('name') == 'positions'):
    break
#print array.childNodes

At_Red = []
for vec in array.getElementsByTagName('v'):
  At_Red.append([float(str) for str in vec.firstChild.data.split()])

# Debug
#print At_Red

# Collect the optimization/dynamical matrix flags
for array in struc.getElementsByTagName('varray'):
  if array.hasAttribute('name') & (array.getAttribute('name') == 'selective'):
    break

At_Coord_Flags = []
for vec in array.getElementsByTagName('v'):
  At_Coord_Flags.append([ (str=='T') for str in vec.firstChild.data.split()])

# Debug
#print At_Flag_F

# Here we generate the flags to control if the atom is active or not. We also
# make sure that:
#  1) If IBRION = 6, then we should have optimization flags for all atoms. If
#     this is not the case, then we print a warning.
#  2) If IBRION = 5, we count the atoms that have optimization flags and make
#     sure that all the coordinates are free ("T T T"). Otherwise we fail.
if IBRION == 6:
  if not(all([ all(row) for row in At_Coord_Flags ])):
    sys.stderr.write('Warning: IBRION = 6 but frozen coordinates found\n')
    sys.stderr.write('         Make sure this is what your really want\n')
  At_Flags = [True]*nAt_Tot
  nAt_Use = nAt_Tot

if IBRION == 5:
  if not(all([ (sum(row)==0) or (sum(row)==3) for row in At_Coord_Flags ])):
    sys.stderr.write('Error: IBRION = 5 has partially frozen atoms\n')
    sys.stderr.write('       Probably this is not what you want\n')
    sys.exit()
  At_Flags = [ (sum(row)==3) for row in At_Coord_Flags ]
  nAt_Use = sum(At_Flags)

# Convert to cartesian coordinates
At_XYZ = []
for At in At_Red:
  XYZ = [ 0, 0, 0 ]
  for iCoor in range(0,3):
    for jCoor in range(0,3):
      XYZ[jCoor] = XYZ[jCoor] + ang2au*At[iCoor]*Cell_Vec[iCoor][jCoor]
  At_XYZ.append(XYZ)

# Debug
#print At_XYZ
#exit()

# Here we should do some sanity checks of the data we read

# Find the Hessian
dynmatlist = xmldoc.getElementsByTagName('dynmat')

if dynmatlist.length < 1:
  sys.stderr.write('No dynmat data found\n')
  sys.exit()
if dynmatlist.length > 1:
  sys.stderr.write('Warning: found more than one dynmat, will use first one\n')

for array in dynmatlist[0].getElementsByTagName('varray'):
  if array.hasAttribute('name') & (array.getAttribute('name') == 'hessian'):
    break

Hessian= []
for vec in array.getElementsByTagName('v'):
  Hessian.append([float(str) for str in vec.firstChild.data.split()])

# Debug
#print len(Hessian[0])
#print Hessian[1]
#print (Hessian[29][29:107])
#for vec in Hessian:
#  for elem in vec:
#    print '{:14.8f}'.format(elem)
#sys.exit()

# Convert the Hessian into the blocked format we use in the output
# NOTE: This is very ugly, but will have to do for now until I learn more
Dyn_Mat = [[[] for i in range(0,nAt_Use)] for i in range(0,nAt_Use)]
iAt_Use = 0
for iAt in [ x for (x,y) in zip(range(0,nAt_Tot),At_Flags) if y ]:
  jAt_Use = 0
  for jAt in [ x for (x,y) in zip(range(0,nAt_Tot),At_Flags) if y ]:
    Block = []
    for iCoor in range(0,3):
      Row = Hessian[3*iAt_Use+iCoor][3*jAt_Use:3*jAt_Use+3]
      Fac = -sqrt(Typ_Mass[At_Typ[iAt]]*Typ_Mass[At_Typ[jAt]])*0.0102908487617
      Block.append([Fac*fc for fc in Row])
    Dyn_Mat[iAt_Use][jAt_Use] = Block
    jAt_Use += 1
  iAt_Use += 1

# Debug
#print Hessian[0][0:3]

# Debug
#print len(Dyn_Mat[0][0])
#exit()

# Here we should do some sanity checks of the data we read

# Testing the calculation of numerical second derivatives using the information
# stored in vasprun.xml.

#print At_Coord_Flags
calclist = xmldoc.getElementsByTagName('calculation')

# Debug
#print len(calclist)

# Collect all the positions for each perturbation
icalc=0
Positions = []
for calc in calclist:
  for array in calc.getElementsByTagName('varray'):
    if array.hasAttribute('name') & (array.getAttribute('name') == 'positions'):
      break
  Positions.append([])
  for vec in array.getElementsByTagName('v'):
    Positions[icalc].append([float(str) for str in vec.firstChild.data.split()])
  icalc += 1

#print len(Positions)
#print Positions[0][10]
#print Positions[1][10]
#print Positions[2][10]
#sys.exit()
# Collect all the forces for each perturbation
icalc=0
Forces = []
for calc in calclist:
  for array in calc.getElementsByTagName('varray'):
    if array.hasAttribute('name') & (array.getAttribute('name') == 'forces'):
      break
  Forces.append([])
  for vec in array.getElementsByTagName('v'):
    Forces[icalc].append([float(str) for str in vec.firstChild.data.split()])
  icalc += 1

#print len(Forces)
#print len(Forces[0])
#print len(Forces[0][0])

# Do a quick test of the finite differences to make sure we get the same number
# as the internal code in VASP.
#print len(Forces[0])
#print len(Hessian), len(Hessian[0])
#print Hessian[25][0], Hessian[25][1], Hessian[25][2]
#print Forces[0][10]
#print Forces[1][10]
#print Forces[2][10]
#print 0.5*(Forces[155][35][0]-Forces[156][35][0])/POTIM

# Check that the number of perturbation calculations agrees with the number of
# atoms in use in IBRION=5
if len(calclist) != (3*nAt_Use*NFREE+1):
  sys.stderr.write('Found wrong number of finite difference calculations\n')
  sys.exit()

# Check that all the perturbations have the same number of atoms
for force in Forces:
  if len(force) != nAt_Tot:
    sys.stderr.write('Found wrong number of atoms in force\n')
    sys.exit()

Der2 = []
for iCoord in range(1,3*nAt_Use+1):
  Buffer = []
  for iAt in [ x for (x,y) in zip(range(0,nAt_Tot),At_Flags) if y ]:
# for iAt in range(0,nAt_Tot):
    Force_p = Forces[2*iCoord - 1][iAt]
    Force_m = Forces[2*iCoord][iAt]
    for der in [ 0.5*(a-b)/POTIM for (a,b) in zip(Force_p,Force_m) ]:
      Buffer.append(der)
  Der2.append(Buffer)

print Der2[77][77]/195.08
print Hessian[77][77]
sys.exit()

# Now we have all the data we need, we print it out in the right format

# In the future we will get options as to what format of dym to print. For
# now we hardwire it here and print accordingly
Dym_Type = 4

# dym format label
print '{:4d}'.format(Dym_Type)

# Used number of atoms
print '{:4d}'.format(nAt_Use)

# Atomic numbers
for AN in [ x for (x,y) in zip(At_AN,At_Flags) if y ]:
  print '{:4d}'.format(AN)

# Atomic masses
for At in [ x for (x,y) in zip(At_Typ,At_Flags) if y ]:
  print '{:14.7f}'.format(Typ_Mass[At])

if   Dym_Type == 1:

# Cartesian coordinates, in au
  for At in [ x for (x,y) in zip(At_XYZ,At_Flags) if y ]:
    print '{:14.8f}{:14.8f}{:14.8f}'.format(*At)

elif Dym_Type == 4:

# Reduced coordinates
  for At in [ x for (x,y) in zip(At_Red,At_Flags) if y ]:
    print '{:11.8f}{:11.8f}{:11.8f}'.format(*At)

# Debug
#print Dyn_Mat[0][0][0][0]*Typ_Mass[At_Typ[0]]*0.0102908487617
#print Dyn_Mat[0][0][0][0]
#exit()

# Print the dynamical matrix blocks
for iAt in range(0,nAt_Use):
  for jAt in range(0,nAt_Use):
    print ' {:4d} {:4d}'.format(iAt+1,jAt+1)
    for Row in Dyn_Mat[iAt][jAt]:
      print ' {:13.6e} {:13.6e} {:13.6e}'.format(*Row)

# Print the cell vectors if this dym file type includes them
if   Dym_Type == 4:

# Print a separator line
  print ''

  for Vec in Cell_Vec:
    print '{:14.8f}{:14.8f}{:14.8f}'.format(*[ang2au*x for x in Vec])


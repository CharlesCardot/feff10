446,501c446,501
<        subroutine str2il(str,miar,niar,iar,ierr)
< !  convert a string into an integer _list_, 
< !  supporting syntax like '1-2,12,4,6-8' returns
< !  iar =   1,2,4,6,7,8,12    niar = 7
< !
< !  returns ierr = -1 if string clearly non-integer
<        character*(*) str , s*128, sint*32
<        integer  miar, niar, iar(miar), ierr, istrln
<        integer  i, ibeg
<        logical  dash
<        external  istrln
<        s    = str
<        call triml(s)
<        ilen = istrln(s)+1
<        s    = s(1:ilen-1)//'^'
<        do 20 i = 1, miar
<           iar(i) = 0
<  20    continue 
<        niar =  0
<        ierr = -1
<        ix1  =  0
<        dash = .false.
<        if (ilen.gt.1) then
<           i    = 1
<           ibeg = 1
<  100      continue 
<           i = i + 1
<           if ((s(i:i).eq.',') .or. (s(i:i).eq.'^')) then
<              sint = s(ibeg:i-1)
<              ibeg = i+1
<              if (dash) then
<                 call str2in(sint,ix,ierr)
<                 do 130 j = ix1, ix
<                    niar = niar + 1
<                    iar(niar) = j
<  130            continue 
<              else
<                 call str2in(sint,ix,ierr)
<                 niar = niar + 1
<                 iar(niar) = ix
<              end if
<              dash = .false.
<           elseif (s(i:i).eq.'-') then
<              sint = s(ibeg:i-1)
<              dash = .true.
<              call str2in(sint,ix1,ierr)
<              ibeg = i+1
<           end if
<           if (s(i:i).ne.'^') go to 100
<        end if
< ! now remove the zeroth one!
<        niar = niar - 1
< !
<        return
< ! end subroutine str2il
<        end
---
> !        subroutine str2il(str,miar,niar,iar,ierr)
> ! !  convert a string into an integer _list_,
> ! !  supporting syntax like '1-2,12,4,6-8' returns
> ! !  iar =   1,2,4,6,7,8,12    niar = 7
> ! !
> ! !  returns ierr = -1 if string clearly non-integer
> !        character*(*) str , s*128, sint*32
> !        integer  miar, niar, iar(miar), ierr, istrln
> !        integer  i, ibeg
> !        logical  dash
> !        external  istrln
> !        s    = str
> !        call triml(s)
> !        ilen = istrln(s)+1
> !        s    = s(1:ilen-1)//'^'
> !        do 20 i = 1, miar
> !           iar(i) = 0
> !  20    continue
> !        niar =  0
> !        ierr = -1
> !        ix1  =  0
> !        dash = .false.
> !        if (ilen.gt.1) then
> !           i    = 1
> !           ibeg = 1
> !  100      continue
> !           i = i + 1
> !           if ((s(i:i).eq.',') .or. (s(i:i).eq.'^')) then
> !              sint = s(ibeg:i-1)
> !              ibeg = i+1
> !              if (dash) then
> !                 call str2in(sint,ix,ierr)
> !                 do 130 j = ix1, ix
> !                    niar = niar + 1
> !                    iar(niar) = j
> !  130            continue
> !              else
> !                 call str2in(sint,ix,ierr)
> !                 niar = niar + 1
> !                 iar(niar) = ix
> !              end if
> !              dash = .false.
> !           elseif (s(i:i).eq.'-') then
> !              sint = s(ibeg:i-1)
> !              dash = .true.
> !              call str2in(sint,ix1,ierr)
> !              ibeg = i+1
> !           end if
> !           if (s(i:i).ne.'^') go to 100
> !        end if
> ! ! now remove the zeroth one!
> !        niar = niar - 1
> ! !
> !        return
> ! ! end subroutine str2il
> !        end
759,761d758
< 
< 
< 
